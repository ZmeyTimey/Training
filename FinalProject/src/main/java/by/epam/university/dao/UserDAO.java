package by.epam.university.dao;

import by.epam.university.dao.exception.DAOException;
import by.epam.university.model.User;

/**
 * The Interface UserDAO
 *
 * defines methods for working with user.
 */
public interface UserDAO {

    // ADD operations

    /**
     * Adds a new user to the data base. Returns the id of this user generated by
     * the data base.
     *
     * @param user
     *            the user
     * @return the id of added user
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    Integer addUser(User user) throws DAOException;

    // GET operations

    /**
     * Checks if the email or login exists already in the data base. Returns
     * <code>true<\code> if exists, <code>false<\code> if not.
     *
     * @param login user's login.
     * @param password user's password.
     * @return true if email or login exists in data base, false if neither email,
     *         nor login exists
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    boolean isUserExists(String login, String password) throws DAOException;

    /**
     * Gets the user by login and password. Returns null if the user with
     * such parameters doesn't exist.
     *
     * @param login
     *            <code>String</code> representing a login or email
     * @param password
     *            the password
     * @return the user object if user with such parameters exists, null if not
     *         exists
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    User getUser(String login, String password) throws DAOException;

    /**
     * Gets the user name by its id.
     *
     * @param idUser
     *            the id user
     * @return the user name
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    String getUserName(Integer idUser) throws DAOException;

    // UPDATE operations

    /**
     * Sets to existing user additional info. The user should have been added
     * already before using this method.
     *
     * @param user
     *            with filling fields
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    void setUserFullInfo(User user) throws DAOException;

}