package by.epam.university.dao.impl;

import by.epam.university.dao.AbstractDAO;
import by.epam.university.dao.UserDAO;
import by.epam.university.dao.connection.ConnectionPool;
import by.epam.university.dao.exception.ConnectionPoolException;
import by.epam.university.dao.exception.DAOException;
import by.epam.university.model.Role;
import by.epam.university.model.User;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
/**
 * Defines methods for working with 'user' data base table.
 */
public class UserDAOImpl extends AbstractDAO implements UserDAO {

    private static final Logger LOGGER = LogManager.getLogger(UserDAOImpl.class);

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static final String IS_USER_EXIST
            = "SELECT EXISTS(SELECT 1 FROM `users` WHERE `login`=? AND `password`=?)";
    private static final String ADD_USER
            = "INSERT INTO `users` (`login`, `password`,"
            + "`name`, `middlename`, `surname`,"
            + "`email`, `phone`, `role_id`)" +
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String SET_USER_FULL_INFO
            = "UPDATE `users` SET" +
            "`id`=?, `name`=?, `middlename`=?, `surname`=?, `email`=?, `phone`=?";
    private static final String GET_USER
            = "SELECT `users`.`id`, `login`, `role`"
            + "FROM `users` JOIN `user_role`"
            + "ON (`role_id`=`user_role`.`id`)"
            + "WHERE (`password`= ? AND `login`=?);";
    private static final String GET_USER_NAME
            = "SELECT `name` FROM `users` WHERE `id`= ?;";
    private static final String GET_ROLE_ID
            = "SELECT `id` FROM `user_role` WHERE `role`=?";

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static final int ID_USER = 1;
    private static final int LOGIN = 2;
    private static final int ROLE = 3;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Instantiates a new UserDAOImpl instance for non transactional operations.
     */
    public UserDAOImpl() {
    }

    /**
     * Instantiates a new UserDAOImpl instance for transactional operations.
     *
     * @param connection
     *            the connection that can be transferred between different DAO
     */
    public UserDAOImpl(Connection connection) {
        super(connection);
    }

    /**
     * Adds a new user to the data base. Returns the id of this user generated by
     * the data base.
     *
     * @param user
     *            the user
     * @return the id of added user
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public Integer addUser(User user) throws DAOException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            System.out.println("add user");
            connection = getConnection();
            System.out.println(connection);
            statement
                    = connection.prepareStatement(
                            ADD_USER, Statement.RETURN_GENERATED_KEYS);

            System.out.println(statement);
            statement.setString(1, user.getLogin());
            statement.setString(2, user.getPassword());
            statement.setString(3, user.getName());
            statement.setString(4, user.getMiddlename());
            statement.setString(5, user.getSurname());
            statement.setString(6, user.getEmail());
            statement.setString(7, user.getPhone());

            Role role = user.getRole();
            System.out.println(role);
            int roleId = getRoleId(role);
            System.out.println(roleId);
            statement.setInt(8, roleId);

            statement.executeUpdate();

            System.out.println("executeUpdate");
            resultSet = statement.getGeneratedKeys();
            resultSet.next();

            return resultSet.getInt(1);

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException("Exception during adding user to table 'users' in DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(resultSet, statement);
            } catch (SQLException e) {
                    LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Checks if the login exists already in the data base. Returns
     * <code>true<\code> if exists, <code>false<\code> if not.
     *
     * @param login user's login.
     * @param password user's password.
     * @return true if login exists in data base, false if it don't exists.
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public boolean isUserExists(String login, String password)
            throws DAOException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement(IS_USER_EXIST);
            statement.setString(1, login);
            statement.setString(2, password);
            resultSet = statement.executeQuery();
            resultSet.next();
            return resultSet.getBoolean(1);

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException(
                    "Exception during checking of existing email or login in DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(resultSet, statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Gets the user by login and password. Returns null if the user with
     * such parameters doesn't exist.
     *
     * @param login
     *            <code>String</code> representing a login.
     * @param password
     *            the password
     * @return the user object if user with such parameters exists, null if not
     *         exists
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public User getUser(String login, String password)
            throws DAOException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement(GET_USER);
            statement.setString(1, password);
            statement.setString(2, login);
            resultSet = statement.executeQuery();
            resultSet.next();

            if (resultSet.getRow() == 0) {
                return null;
            }
            return formUser(resultSet);

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException("Exception during getting user by login and password from DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(resultSet, statement);

            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Gets the user name by the specified id.
     *
     * @param idUser
     *            the id of user
     * @return the user name
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public String getUserName(Integer idUser) throws DAOException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement(GET_USER_NAME);
            statement.setInt(1, idUser);
            resultSet = statement.executeQuery();
            resultSet.next();
            return resultSet.getString(1);

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException("Exception during getting user name from DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(resultSet, statement);

            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Sets to existing user additional info. The user should have been added
     * already before using this method.
     *
     * @param user
     *            consisting additional info
     * @throws DAOException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public void setUserFullInfo(User user) throws DAOException {

        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement(SET_USER_FULL_INFO);
            statement.setInt(1, user.getId());
            statement.setString(2, user.getName());
            statement.setString(3, user.getMiddlename());
            statement.setString(4, user.getSurname());
            statement.setString(5, user.getEmail());
            statement.setString(6, user.getPhone());
            statement.executeUpdate();

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException(
                    "Exception during adding info about user to table 'user' in DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    private int getRoleId(Role role) throws DAOException {
        String value = role.toString();

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet;

        try {
            System.out.println("getRoleId start");
            connection = getConnection();
            System.out.println(connection);
            statement = connection.prepareStatement(GET_ROLE_ID);
            System.out.println(statement);
            statement.setString(1, value);
            resultSet = statement.executeQuery();
            System.out.println(resultSet);
            resultSet.next();
            int result = resultSet.getInt(1);
            System.out.println(result);
            return result;

        } catch (SQLException | ConnectionPoolException e) {
            throw new DAOException(
                    "Exception during getting user role id from table 'user_role' in DB.", e);

        } finally {

            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    private User formUser(ResultSet resultSet) throws SQLException {

        User user = new User();
        user.setId(resultSet.getInt(ID_USER));
        user.setLogin(resultSet.getString(LOGIN));
        user.setRole(Role.valueOf(resultSet.getString(ROLE)));
        return user;
    }
}
